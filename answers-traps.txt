--q
Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
--a
a0, a1, a2, ..., contains args. a2 contains 13 (arg2).

--q
Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
--a
In main, call to f is optimized, f(8)+1=12. In f, call to g is optmized, g(x)=>x+3.

--q
At what address is the function printf located?
--a
0x630. When call printf, pc points to 0x30, use pc-relative jump, 0x630=0x30+0x600,
auipc	ra,0x0 # ra <- pc + high 20 bits of the relative address 
jalr    1536(ra) # target addr <- ra + low 12 bits of the relatve address, jump and link next addr to ra.

--q
Run the following code.

	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
      
What is the output? Here's an ASCII table that maps bytes to characters.
The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
--a
He110 World. 57616 == 0xe110, 0x00646c72 == [114, 108, 100, 0, ...] == "rld\0". For big-endian, "rld\0" == [114, 108, 100, 0, 0, 0, 0, 0] == 0x726c640000000000, 57616 do not need to change, since its treated as a whole.

--q
In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?
	printf("x=%d y=%d", 3);
--a
x=3, y=0. The callee assumes arg2 on a2, and a2 contains 0.
